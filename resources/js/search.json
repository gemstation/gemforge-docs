[[{"l":"Introduction","p":["Gemforge is an open-source command-line tool for building, deploying and upgrading Diamond Standard contracts on EVM chains."]},{"l":"Why","p":["The Diamond Standard (EIP-2535) is one of the best ways to build and deploy infinite sized, upgradeable contracts.","But utilizing the standard involves having to write a lot of boilerplate code, including but not limited to the core diamond proxy contract, interface code to enable easy access for dapps, deployment code which calculates what facets to add and remove in each upgrade, etc.","Gemforge to the rescue!","By automating almost all aspects of this boilerplate code whilst still remaining highly configurable, Gemforge lessens the workload and saves time when developing with Diamond Standard.","Gemforge only supports Solidity. Other EVM languages are not currently supported."]}],[{"l":"Getting started"},{"i":"step-1---installation","l":"Step 1 - Installation","p":["Gemforge is written in Node.js and works on all the platforms that Node runs on.","Node v16 or above is required. We recommend using nvm to manage different Node versions on your machine.","It's best to install Gemforge globally in your Node environment, depending on which package manager you use:","At this point you should be able to run the gemforge command:"]},{"i":"step-2---project-setup","l":"Step 2 - Project setup"},{"l":"Create a new project","p":["Gemforge provides example projects for both LINK: Hardhat and LINK: Foundry.","These can be cloned and setup in an empty folder using the scaffold command:"]},{"l":"Use with an existing project","p":["If you have an existing Diamond Standard project then you can use the init command to create a Gemforge configuration file.","The gemforge.config.cjs file will have been created in the current folder. You will probably need to edit this file to customize it for your project.","Note: Gemforge assumes that your project uses the diamond-2-hardhat reference repository for the core Diamond Standard libraries. It also assumes that the core facets are part of your diamond."]},{"i":"step-3---build-contracts","l":"Step 3 - Build contracts","p":["To generate all necessary Diamond code and compile your project inside the project folder:"]},{"i":"step-4---deploy-contracts","l":"Step 4 - Deploy contracts","p":["Assuming a local test node is running at http://localhost:8545, use the following to deploy your Diamond code and facets to it:","At this point you've just built and deployed a Diamond Standard project to your local test node using Gemforge!"]}],[{"l":"Commands","p":["All Gemforge commands are executed by running gemforge command name in a terminal."]},{"l":"Help","p":["To see list of commands use the --help option:","To see usage help for a particular command type gemforge command name --help. For example:"]},{"l":"Logging","p":["To get verbose logging output, append -v or --verbose to any command, e.g:","To turn off logging completely, append -q or --quiet:","Note: Fatal errors are always logged, even if normal logging is turned off."]}],[{"l":"init","p":["The init command is used initialize a Gemforge configuration file for an existing Diamond contract project of yours. This will then allow you to run Gemforge commands against said project.","Gemforge assumes that your project uses the diamond-2-hardhat reference repository for the core Diamond Standard libraries. It also assumes that the core facets - DiamondLoupe, DiamondCut, Ownership- are part of your diamond.","To create the default config file:","This will create a file in the current folder called gemforge.config.cjs. You can edit this file to customize the configuration.","To customize the name of the config file, use the --name option:","Note: It's important to keep the .cjs file extension if customizing the config file name, as this is required for Gemforge to be able to load it correctly."]}],[{"l":"scaffold","p":["The scaffold command is used to setup a minimal project using Gemforge as a starting point for one's own project. This saves you time since everything will already be setup for you to start building with.","To setup the scaffolding in the current folder:","To setup the scaffolding in a specific folder, use the --folder option:","Note: Gemforge will complain if the target folder isn't empty. If it doesn't exist it will be created automatically by Gemforge."]}],[{"l":"build","p":["The build command does all of the following:","Auto-generates Diamond proxy code and Dapp interface.","Auto-generates Diamond deployment code for testing in Foundry.","Builds/compiles all your code.","To run it:","The following files will be generated:","DiamondProxy.sol- the core diamond proxy contract which delegates to all of your facets. The constructor sets up the core library facets, as well as a basic ERC165 implementation.","IDiamondProxy.sol- the diamond proxy interface using which Dapps can execute facet methods on the on-chain contract.","LibDiamondHelper.sol- a library for use within Foundry tests for deploying the Diamond and its facets.","facets.json- a list of all facets and their exported methods - used by the deploy command.","We recommend adding all of the above files to your .gitignore since they are not meant to be committed to version control.","To see an example of the above generated files in action check out the sample project command."]}],[{"l":"deploy","p":["The deploy command both deploys and upgrades Diamond contracts on a network.","If no previous deployment is detected (see below) it will do a new one, otherwise it will automatically work out which facets and methods have changed (by comparing to the on-chain bytecode) and upgrade the on-chain proxy accordingly.","To run it:","This will deploy contracts to the local network, which is defined in the default configuration file.","To deploy to another network, first ensure that network is defined in the configuration. Then run:"]},{"l":"Deployment records","p":["Once deployment has succeeded a gemforge.deployments.json file will be created. This contains the addresses of all the deployed contracts along with their constructor arguments and deployment transaction hashes, for each network that has been deployed to.","An example gemforge.deployments.json:","Subsequent calls to the deploy command will result in this file being checked to see if a fresh deployment is needed, or if an upgrade should be performed on the given network.","Gemforge performs a thorough check, i.e. it actually attempts to query the proxy contract on the network to see if it is indeed a Diamond deployment.","In order for upgrades to work, Gemforge assumes that the core facets - DiamondLoupe, DiamondCut, Ownership- are part of your diamond. If you used Gemforge to deploy the initial diamond then this will already be taken care of for you.","If instead, you wish to force a fresh deployment, then simply append the -n or --new option to the command:"]},{"l":"Etherscan verification","p":["To verify your contracts on Etherscan you can use post-deploy hooks. Examples of this can be found in the example project repos:","Foundry: https://github.com/gemstation/contracts-foundry","Hardhat: https://github.com/gemstation/contracts-hardhat"]}],[{"l":"Configuration","p":["The Gemforge configuration file - gemforge.config.cjs- tells how Gemforge how to understand your project layout and what actions to take.","The default configuration file template contains all possible configuration options as well as accompanying comments explaining their purpose.","Note: ALL configuration options are mandatory, as this then makes everything explicit, reducing the chance of errors."]}],[{"l":"Compiler","p":["All generated Solidity code will have the following two lines at the top:","Both the SPDX license id and Solidity version to use must be set in the config file:","The SPDX license id must be valid, and will be checked against a known list."]}],[{"l":"Commands","p":["Gemforge executes certain commands via the underlying development framework.","These must be configured as follows:"]}],[{"l":"Paths","p":["Gemforge needs to know where to find your contract source code, library imports, build artifacts, and where to place all generated output.","The configuration options:"]},{"l":"Generated files","p":["The generated.solidity folder path should be inside the same folder containing your project's smart contracts so that everything gets compiled together.","The generated.solidity folder path is for holding files which are used by Gemforge internally.","The generated.deployments file will contain the details of deployed Diamond contracts, indexed by network chain id. You may wish to check this file into version control in order to store these details for consumption elsewhere."]},{"l":"Library files","p":["The lib.diamond folder path should point to where the contents of the diamond-2-hardhat repository can be found. This is required for the code which Gemforge generates."]}],[{"l":"Generator","p":["Generator options modify the behaviour of the code generator."]},{"l":"Proxy interface imports","p":["The generator.proxyInterface.imports array lists files which should be imported within the generated diamond proxy interface code.","This is only required if any of your facet methods either take a struct as input or return a struct as output.","For example, if you had the following facet file:","Then the proxy interface file generated by Gemforge would contain this method signature. However, the file wouldn't compile since the struct isn't imported by it:","To fix this, you would define a file containing the struct - e.g Structs.sol- and then import that into your facet code:","Now you would modify the config as follows:","The Structs.sol file would then be imported by the generated proxy interface via the correct relative folder path, and the interface code itself would now compile:"]}],[{"l":"Artifacts","p":["Gemforge needs to know the format the artifacts are in:"]}],[{"l":"Diamond","p":["The diamond structure itself can be configured:"]},{"l":"Initialization contract","p":["The initialization contract - diamond.init config - must be a uniquely named contract so that Gemforge can easily find it in the artifacts folder.","If this value is empty then an initialization call will not be made."]},{"l":"Core facets","p":["Core facets are contracts whose selectors are considered sacrosanct such that they will never be removed from the diamond in upgrade by Gemforge. Gemforge will also complain if you create a contract that has one of these names.","The default core facets in the config file are the ones provided by the standard diamond library and are essential to the correct working of the deployment and upgrade mechanisms:","DiamondLoupe- An interface for querying the diamond. Essential to making upgrades work.","DiamondCut- The upgrade mechanism for the diamond.","Ownership- Verification and transfer of diamond ownership.","Unless you really know what you're doing we recommend leaving this array unchanged."]}],[{"l":"Hooks","p":["Gemforge makes it easy to run pre- and post- hooks for the build and deploy commands. These can be any command-line call:"]},{"l":"Environment variables","p":["When Gemforge calls the preDeploy and postDeploy hooks it will pass through the following environment variables:","GEMFORGE_DEPLOY_CHAIN_ID- chain id of network being deployed to","This can then be used in your hooks, e.g we may define a post-deployment script as follows:","In the sample project the post-deploy hook is used to perform Etherscan verification."]}],[{"l":"Wallets","p":["Wallets are required for deploying your contracts to a network.","They are configured as follows:","Each wallet is uniquely named and fully configured as shown above.","Note: At present only the mnemonic wallet type is supported. We aim to add more wallet types in future."]}],[{"l":"Networks","p":["The available deployment networks must be explicitly specified in the configuration. Gemforge does not rely on any networks you've configured elsewhere in your development environment.","The wallet value must refer to a valid, defined wallet. If not then Gemforge will complain.","To deploy contracts to one of the specified networks simply use it's name with the deploy command, e.g to deploy to the sepolia network defined in the configuration file:"]}],[{"l":"Security","p":["It's important to keep your configuration file secure by not storing sensitive information inside it. This includes but is not limited to:","Mnemonic / seed phrases used for production deployments","Infura / Alchemy RPC URLs which contain your API key","Any other passwords and/or API keys"]},{"l":"Environment secrets","p":["The default configuration file template gives one example of how this can be accomplished using environment variables. For example:","To make this work you would have to supply the MNEMONIC environment variable on the command-line or in the shell environment. For example:"]},{"i":"env","l":".env","p":["Another option is to use the dotenv package within your config file to load in these environment variables from a .env file:","Then in gemforge.config.cjs:","A working example of this can be seen in the sample project.","Note: Remember to add .env to your .gitignore if you use this method."]}],[{"l":"Development frameworks","p":["At present the following two Solidity development frameworks are supported:","Foundry- Fast, rust-based. RECOMMENDED.","Hardhat- Javascript/Typescript-based, more plugins.","We recommend Foundry over Hardhat because it's much faster (especially for testing) and allows for tests to be written in Solidity.","Gemforge is built with Foundry primarily in mind. However, sample projects for both frameworks are available:","Foundry: https://github.com/gemstation/contracts-foundry","Hardhat: https://github.com/gemstation/contracts-hardhat","The sample projects also demonstrate how to use the post-deploy hook to perform Etherscan verification.","Note: The sample projects both use Git submodules to load in essential third-party libraries."]}],[{"l":"Useful links","p":["Gemforge","Homepage: https://gemforge.xyz","Github repository: https://github.com/gemstation/gemforge","NPM package: https://npmjs.com/package/gemforge","Twitter: https://twitter.com/hiddentao","Diamond Standard","EIP-2535: https://eips.ethereum.org/EIPS/eip-2535","Canonical implementation: https://github.com/mudgen/diamond-2-hardhat/","Documentation: https://www.info.diamonds/","Curated list of stuff: https://github.com/mudgen/awesome-diamonds"]}]]